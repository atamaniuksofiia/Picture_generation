import{S as L,i as l}from"./assets/vendor-5ObWk2rO.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))s(t);new MutationObserver(t=>{for(const r of t)if(r.type==="childList")for(const n of r.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&s(n)}).observe(document,{childList:!0,subtree:!0});function i(t){const r={};return t.integrity&&(r.integrity=t.integrity),t.referrerPolicy&&(r.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?r.credentials="include":t.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(t){if(t.ep)return;t.ep=!0;const r=i(t);fetch(t.href,r)}})();const b="https://pixabay.com/api/",q="46237249-998f0f24dffb15788a2eb0e4e";async function p(a,e){const i=await fetch(`${b}?key=${q}&q=${encodeURIComponent(a)}&image_type=photo&orientation=horizontal&safesearch=true&page=${e}&per_page=15`);if(!i.ok)throw new Error("Failed to fetch images");const s=await i.json();return{images:Array.isArray(s.hits)?s.hits:[],totalHits:s.totalHits}}function u(a){const e=a.map(({webformatURL:s,largeImageURL:t,tags:r,likes:n,views:g,comments:h,downloads:w})=>`
            <div class="img-info-wrapper">
                <li class="gallery-item">
                    <a href="${t}" class="gallery-link">
                        <img src="${s}" alt="${r}" class="gallery-image width="360" " />
                    </a>
                    <div class="info">
                        <p class="info-item"><span>Likes:</span> ${n}</p>
                        <p class="info-item"><span>Views:</span> ${g}</p>
                        <p class="info-item"><span>Comments:</span> ${h}</p>
                        <p class="info-item"><span>Downloads:</span> ${w}</p>
                    </div>
                </li>
                </div>
            `).join("");document.querySelector(".gallery").insertAdjacentHTML("beforeend",e)}const S=document.querySelector(".search-form"),v=document.querySelector(".gallery"),o=document.querySelector(".js-btn-load"),y=document.querySelector(".loader");let d="",c=1,m=0;const f=new L(".gallery a");S.addEventListener("submit",async a=>{if(a.preventDefault(),d=document.querySelector('input[name="query"]').value.trim(),!d){l.error({title:"Error",message:"Search query cannot be empty."});return}v.innerHTML="",c=1,y.classList.remove("is-hidden"),o.style.display="none";try{const{images:e,totalHits:i}=await p(d,c);m=i,e.length===0?(l.error({title:"Error",message:"Sorry, there are no images matching your search query. Please try again!"}),o.style.display="none"):(u(e),f.refresh(),m>15&&(o.style.display="block"))}catch(e){console.error(e),l.error({title:"Error",message:"An error occurred while fetching images. Please try again later."}),o.style.display="none"}finally{y.classList.add("is-hidden")}});o.addEventListener("click",async()=>{var a;c+=1,y.classList.remove("is-hidden"),o.style.display="none";try{const{images:e,totalHits:i}=await p(d,c);if(e.length===0){l.error({title:"Error",message:"Sorry, there are no images matching your search query. Please try again!"}),o.style.display="none";return}u(e),f.refresh(),e.length<15||c*15>=m?o.style.display="none":o.style.display="block";const s=((a=document.querySelector(".gallery-item"))==null?void 0:a.getBoundingClientRect().height)||0;window.scrollBy({top:s*2,behavior:"smooth"})}catch{l.error({title:"Error",message:"An error occurred while fetching images. Please try again later."}),o.style.display="none"}finally{y.classList.add("is-hidden")}});
//# sourceMappingURL=index.js.map
